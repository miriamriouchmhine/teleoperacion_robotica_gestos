<?xml version="1.0"?>
<launch>
  <!-- Gazebo options -->
  <!-- <arg name="world_name" default="$(find robotica_inteligente)/world/scene.world" doc="Gazebo world file"/> -->
  <arg name="world_pose" default="-x 0 -y 0 -z 0 -R 0 -P 0 -Y 0" doc="Pose to spawn the ur5 robot at"/>
  <arg name="initial_joint_positions" default=" -J elbow_joint -1.5708 -J robotiq_finger_1_joint_1 0.0 -J robotiq_finger_1_joint_2 0.0 -J robotiq_finger_1_joint_3 -0.0 -J robotiq_finger_2_joint_1 0.0 -J robotiq_finger_2_joint_2 0.0 -J robotiq_finger_2_joint_3 -0.0 -J robotiq_finger_middle_joint_1 0.0 -J robotiq_finger_middle_joint_2 0.0 -J robotiq_finger_middle_joint_3 -0.0 -J robotiq_palm_finger_1_joint 0 -J robotiq_palm_finger_2_joint 0 -J shoulder_lift_joint -1.5708 -J shoulder_pan_joint -1.5708 -J wrist_1_joint -1.5708 -J wrist_2_joint 1.5708 -J wrist_3_joint -0.78537" doc="Initial joint configuration of the robot"/>
  
  <arg name="namespace_blue" default="/blue"/>
  <arg name="cmd_timeout" default="1.0"/>
  <arg name="world_blue_pose" default="-x -2.0 -y -2.0 -z 0 -R 0 -P 0 -Y 0" doc="Pose to spawn the blue robot at"/>

  <!-- Start Gazebo paused to allow the controllers to pickup the initial pose -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" pass_all_args="true">
    <!-- <arg name="world_name" value="$(arg world_name)"/> -->
    <arg name="paused" value="true"/>
    <arg name="verbose" value="true"/>
  </include>

  <node name="spawn_objet" pkg="robotica_inteligente" type="spawn_random_position.py" output="screen" />
  <!-- Set the robot urdf on the parameter server -->
  <param name="robot_description" command="xacro  '$(find ur5eRobotiq3f_moveit_config)/config/gazebo_ur5e_robot_simple.urdf'" />

   <!-- Spawn the vehicle. -->
  <include file="$(find blue_description)/launch/ackermann_vehicle.launch">
    <arg name="namespace" value="$(arg namespace_blue)"/>
  </include>

  <group ns="$(arg namespace_blue)">

    <!-- Spawn the vehicle. -->
    <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param robot_description -model ackermann_vehicle
                $(arg world_blue_pose)"
          />

    <!-- Load the joint controllers. One of these publishes the joint states
         to joint_states. -->
    <rosparam file="$(find blue_description)/config/blue_joint_ctrlr_params.yaml" command="load"/>
    <node name="controller_spawner" pkg="controller_manager" type="spawner" 
          args="joint_state_ctrlr left_steering_ctrlr right_steering_ctrlr left_front_axle_ctrlr
          right_front_axle_ctrlr left_rear_axle_ctrlr right_rear_axle_ctrlr left_front_shock_ctrlr
          right_front_shock_ctrlr left_rear_shock_ctrlr right_rear_shock_ctrlr"/>

    <!-- Control the steering, axle, and shock absorber joints. -->
    <node name="ackermann_controller" pkg="ackermann_vehicle_gazebo"
          type="ackermann_controller">
      <param name="cmd_timeout" value="$(arg cmd_timeout)"/>
      <rosparam file="$(find blue_description)/config/blue_ackermann_ctrlr_params.yaml" command="load"/>
    </node>
  </group>

  <!-- Spawn the robot in Gazebo -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -unpause $(arg world_pose) $(arg initial_joint_positions)"
    respawn="false" output="screen" />

  <!-- Load the controller parameters onto the parameter server -->
  <rosparam file="$(find ur5eRobotiq3f_moveit_config)/config/gazebo_controllers.yaml" />
  <include file="$(find ur5eRobotiq3f_moveit_config)/launch/ros_controllers.launch"/>

  <!-- Spawn the Gazebo ROS controllers -->
  <node name="gazebo_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller" />

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find robotica_inteligente)/launch/config.rviz" />
</launch>
